import 'dart:developer';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:krives_project/core/data/datasrouces/data_class/route_argument.dart';
import 'package:krives_project/core/data/datasrouces/data_class/user_sport.dart';
import 'package:krives_project/core/functions/function.dart';
import 'package:krives_project/core/theme/themes_color.dart';
import 'package:krives_project/features/signup/bloc/radio_button_gender_bloc.dart';
import '../../../core/theme/themes_text_styles.dart';

class ButtonSignUpValidate extends StatelessWidget {
  final String? labelText;
  final Map<String, TextEditingController> textEditingController;

  const ButtonSignUpValidate(
      {super.key, required this.labelText, required this.textEditingController});

  @override
  Widget build(BuildContext context) {
    var db = FirebaseFirestore.instance;
    return BlocBuilder<RadioButtonGenderBloc, RadioButtonGenderState>(
      builder: (context, state) {
        return InkWell(
          onTap: () async {
            int genderSelected = 1;
            if(state is RadioButtonGenderSelected){
              genderSelected = state.gender;
            }
            await theGoodForm(textEditingController,genderSelected,context);
          },
          child: Ink(
            child: Container(
              margin: EdgeInsets.fromLTRB(41, 0, 41, 0),
              height: 43,
              constraints: BoxConstraints(
                  maxWidth: 500
              ),
              decoration: BoxDecoration(
                color: ThemesColor.green1,
                borderRadius: BorderRadius.circular(21.5),
              ),
              child: Center(
                child: Text(labelText!,
                  style: ThemesTextStyles.textBigBoldBlack,
                ),
              ),
            ),
          ),
        );
      },
    );
  }
  Future<void> theGoodForm(Map<String, TextEditingController> controller, int genderSelected,BuildContext context) async {
    if (controller.length == 6) {
      bool verifAllTextField = false;
      bool verifPasswordResponse = false;
      controller.forEach((key, element) {
        verifAllTextField = verifEmptyTextField(element.text);
        !verifEmptyTextField(element.text) ? log("incorrect way on the case $key") : null ;
      });
      if(verifAllTextField){
        verifPasswordResponse = verifPassword(controller["password"]!.text, controller["confirmPassword"]!.text);
        if(verifPasswordResponse){

          UserSport user = UserSport(
            pseudo: controller["pseudo"]!.text,
            name: controller["name"]!.text,
            firstName: controller["firstName"]!.text,
            birthDate: DateTime.now(),
            sex: getGender(genderSelected),
            email: controller["email"]!.text,
            password: controller["password"]!.text,
          );

          showDialog(
            context: context,
            barrierDismissible: false,
            builder: (context) {
              return const Center(
                child: CircularProgressIndicator(),
              );
            },
          );
          await user.createUserWithEmailAndPassword(user);
          context.mounted ? Navigator.of(context).pop() : null;
          context.mounted && FirebaseAuth.instance.currentUser != null ?
          navigateToPage(context, "home",RouteArgument()) : null;

        }
      }
    }
  }

  bool verifEmptyTextField(String text) {
    if (text.trim().isEmpty || text.contains(RegExp(r'\s+'))) {
      return false;
    }
    return true;
  }
  String getGender(int genderSelected) {
    return genderSelected == 1 ? "Man" : "Woman";
  }

  bool verifPassword(String password, String confirmPassword) {
    log("Password not the same");
    return password == confirmPassword;
  }
}